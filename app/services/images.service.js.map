{"version":3,"file":"images.service.js","sourceRoot":"","sources":["images.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAYA,wBAAwB;YAExB;gBAAA;gBAWA,CAAC;gBATG,qCAAS,GAAT;oBACI,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC;gBAED,oCAAQ,GAAR,UAAS,EAAU;oBACf,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,oBAAM,CAAC,CAAC,IAAI,CAC/B,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,EAAE,KAAK,EAAE,EAAf,CAAe,CAAC,CAAC,CAAC,CAAC,EAA1C,CAA0C,CACvD,CAAA;gBACL,CAAC;gBAXL;oBAAC,iBAAU,EAAE;;qCAAA;gBAYb,wBAAC;YAAD,CAAC,AAXD,IAWC;YAXD,iDAWC,CAAA;YAGD;gBAII,uBAAY,IAAU;oBADtB,YAAO,GAAW,0BAA0B,CAAC;oBAI7C,YAAO,GAAG,IAAI,cAAO,CAAC;wBAClB,eAAe,EAAE,eAAa,uBAAa,CAAC,GAAG,CAAC,QAAU;qBAC7D,CAAC,CAAA;oBAJE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBACtB,CAAC;gBAID,qCAAa,GAAb;oBACI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAA;gBAChD,CAAC;gBACD,2CAAmB,GAAnB,UAAoB,EAAU;oBAC5B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;gBAC1C,CAAC;gBAGL,gCAAQ,GAAR,UAAS,EAAU;oBACjB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;gBACzC,CAAC;gBACG,qCAAa,GAAb,UAAc,QAAgB,EAAE,EAAW;oBAEvC,IAAI,GAAG,GAAG,KAAG,IAAI,CAAC,OAAO,GAAG,QAAU,CAAC;oBACvC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBACL,GAAG,GAAM,GAAG,SAAI,EAAI,CAAC;oBACzB,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;yBAChD,SAAS,EAAE;yBACX,IAAI,CAAC,UAAC,QAAQ,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAA;gBAC5C,CAAC;gBA/BL;oBAAC,iBAAU,EAAE;;iCAAA;gBAgCb,oBAAC;YAAD,CAAC,AA/BD,IA+BC;YA/BD,yCA+BC,CAAA","sourcesContent":["import {Image} from '../image';\r\nimport {IMAGES} from './mock-images'\r\nimport { Injectable } from 'angular2/core';\r\nimport {Http, Response, Headers, HTTP_BINDINGS} from 'angular2/http';\r\nimport {PrivateConfig} from '../private';\r\nimport 'rxjs/Rx';\r\n\r\nexport interface IImagesService {\r\n    getImages(): Promise<Image[]>\r\n    getImage(id: string): Promise<Image>\r\n}\r\n\r\n//if environment === dev\r\n@Injectable()\r\nexport class MockImagesService {\r\n\r\n    getImages() {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    getImage(id: string) {\r\n        return Promise.resolve(IMAGES).then(\r\n            images => images.filter(image => image.id === id)[0]\r\n        )\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class ImagesService {\r\n    _http: Http\r\n    _categories;\r\n    baseUrl: string = \"https://api.imgur.com/3/\";\r\n    constructor(http: Http) {\r\n        this._http = http;\r\n    }\r\n    headers = new Headers({\r\n        \"Authorization\": `Client-ID ${PrivateConfig.api.clientId}`\r\n    })\r\n    getCategories() {\r\n        return this._buildRequest(\"topics/defaults\")\r\n    }\r\n    getImagesByCategory(id: string){\r\n      return this._buildRequest(\"topics\", id);\r\n    }\r\n\r\n\r\ngetImage(id: string) {\r\n  return this._buildRequest(\"image\", id);\r\n}\r\n    _buildRequest(endpoint: string, id?: string) {\r\n\r\n        let url = `${this.baseUrl}${endpoint}`;\r\n        if (id) {\r\n            url = `${url}/${id}`;\r\n        }\r\n        return this._http.get(url, { headers: this.headers })\r\n            .toPromise()\r\n            .then((response) => response.json())\r\n    }\r\n}\r\n"]}