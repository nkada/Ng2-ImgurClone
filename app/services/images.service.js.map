{"version":3,"file":"images.service.js","sourceRoot":"","sources":["images.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAYA,wBAAwB;YAExB;gBAAA;gBAWA,CAAC;gBATG,qCAAS,GAAT;oBACI,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7B,CAAC;gBAED,oCAAQ,GAAR,UAAS,EAAU;oBACf,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,oBAAM,CAAC,CAAC,IAAI,CAC/B,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,EAAE,KAAK,EAAE,EAAf,CAAe,CAAC,CAAC,CAAC,CAAC,EAA1C,CAA0C,CACvD,CAAA;gBACL,CAAC;gBAXL;oBAAC,iBAAU,EAAE;;qCAAA;gBAYb,wBAAC;YAAD,CAAC,AAXD,IAWC;YAXD,iDAWC,CAAA;YAGD;gBAGI,uBAAY,IAAU;oBAGtB,YAAO,GAAG,IAAI,cAAO,CAAC;wBACpB,eAAe,EAAE,eAAa,uBAAa,CAAC,GAAG,CAAC,QAAU;qBAC3D,CAAC,CAAC;oBAJC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBACtB,CAAC;gBAID,qCAAa,GAAb;oBACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,yCAAyC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC,KAAK,EAAE,CAAC;gBACrG,CAAC;gBACD,2CAAmB,GAAnB,UAAoB,EAAU;oBAC5B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,iCAAiC,GAAG,EAAE,EAAE,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC,KAAK,EAAE,CAAC;gBACjG,CAAC;gBAED,gCAAQ,GAAR,UAAS,EAAU;oBACjB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,iCAAiC,GAAG,EAAE,EAAE,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC,KAAK,EAAE,CAAC;gBACjG,CAAC;gBAnBL;oBAAC,iBAAU,EAAE;;iCAAA;gBAoBb,oBAAC;YAAD,CAAC,AAnBD,IAmBC;YAnBD,yCAmBC,CAAA","sourcesContent":["import {Image} from '../image';\r\nimport {IMAGES} from './mock-images'\r\nimport { Injectable } from 'angular2/core';\r\nimport {Http, Response, Headers, HTTP_BINDINGS} from 'angular2/http';\r\nimport {PrivateConfig} from '../private';\r\nimport 'rxjs/Rx';\r\n\r\nexport interface IImagesService {\r\n    getImages(): Promise<Image[]>\r\n    getImage(id: string): Promise<Image>\r\n}\r\n\r\n//if environment === dev\r\n@Injectable()\r\nexport class MockImagesService {\r\n\r\n    getImages() {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    getImage(id: string) {\r\n        return Promise.resolve(IMAGES).then(\r\n            images => images.filter(image => image.id === id)[0]\r\n        )\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class ImagesService {\r\n    _http: Http\r\n    _categories;\r\n    constructor(http: Http) {\r\n        this._http = http;\r\n    }\r\n    headers = new Headers({\r\n      \"Authorization\": `Client-ID ${PrivateConfig.api.clientId}`\r\n    });\r\n    getCategories() {\r\n      return this._http.get(\"https://api.imgur.com/3/topics/defaults\", { headers: this.headers}).share();\r\n    }\r\n    getImagesByCategory(id: number){\r\n      return this._http.get(\"https://api.imgur.com/3/topics/\" + id, {headers: this.headers}).share();\r\n    }\r\n\r\n    getImage(id: string) {\r\n      return this._http.get(\" https://api.imgur.com/3/image/\" + id, {headers: this.headers}).share();\r\n    }\r\n}\r\n"]}